import numpy as np
from third_octave import ThirdOctaveTransform
import soundfile as sf
import matplotlib.pyplot as plt
import librosa as lr

def test():
    f = 1000*2**(np.arange(-17, 12)/3)
    print(f)
    
    nicof_speech = [-57.24567413330078, -59.652523040771484, -64.19452667236328, -62.63616943359375, -62.90092468261719, -66.56121063232422, -61.06805419921875, -61.488895416259766, 
                    -59.38362121582031, -54.95968246459961, -41.51368713378906, -32.758026123046875, -44.96356201171875, -46.50436019897461, -38.05213165283203, -54.2524299621582,
                    -50.96656799316406, -58.5399284362793, -59.09001922607422, -64.27311706542969, -60.84510040283203, -62.23085021972656, -60.771541595458984, -54.7109375, 
                    -57.63125228881836, -51.17293930053711, -52.80134201049805, -53.671180725097656, -61.27116775512695]
    nicof_94dB = [-92.98419952392578, -97.43899536132812, -97.3574447631836, -98.71554565429688, -99.18815612792969, -102.88231658935547, -100.2879409790039, -100.2767105102539, 
                  -103.57644653320312, -103.16799926757812, -104.79400634765625, -103.29917907714844, -105.34087371826172, -104.85139465332031, -104.70622253417969, -104.53235626220703, 
                  -96.65562438964844, -38.09845733642578, -87.46039581298828, -90.7152328491211, -89.07608032226562, -103.47732543945312, -87.46605682373047, -106.642822265625, 
                  -107.16270446777344, -106.69737243652344, -106.28370666503906, -105.6667709350586, -104.37492370605469]
    nicof_38dB = [-93.84819030761719, -98.07343292236328, -99.55438232421875, -98.27720642089844, -101.46446990966797, -102.31544494628906, -99.7912368774414, -99.4265365600586, 
                  -105.18497467041016, -106.05290985107422, -104.42098236083984, -104.6903305053711, -105.96302032470703, -106.54875183105469, -106.3774642944336, -107.11963653564453, 
                  -107.77446746826172, -108.32949829101562, -109.01284790039062, -108.9819564819336, -109.01556396484375, -109.39887237548828, -109.08728790283203, -108.6187973022461, 
                  -108.38273620605469, -107.48182678222656, -106.98278045654297, -106.02546691894531, -104.85182189941406]
    expected_leqs_speech = [-64.59,-62.82,-63.14,-64.93,-65.03,-66.43,-65.56,-66.  ,-68.06,-66.28,-43.34,
                            -31.93,-37.28,-47.33,-35.33,-42.68,-42.91,-48.51,-49.1 ,-52.9 ,-52.15,-52.8 ,
                            -52.35,-52.31,-53.39,-52.53,-53.73,-53.56,-57.9]
    
    expected_leqs_94dB = [99.48116721400389, -97.48893965813018, -96.81184203949795, -95.84214992764502, -98.10607934318902, -96.58995912512071, -96.67682704617175, -96.34552399897245, 
                          -95.5364517170513, -94.79901758561999, -93.9314365185785, -92.65730679563312, -91.44326986828703, -89.84820640786023, -87.72436124413997, -82.85361930914539, 
                          -62.31561092644313, -38.101112720252885, -62.30610806101392, -83.69825044599386, -87.38405791324978, -94.78531345604127, -87.15480116933949, -100.05667263141724, 
                          -101.78695388790811, -102.64481450593492, -103.30209829076762, -103.33360212552641, -102.90378652372958]
    
    expected_leqs_38dB = [-98.5526106508941, -100.08310461956117, -101.39702355324788, -99.78748251303432, -102.82087254268916, -100.12116830605451, -102.66192546679406, -98.88108459596202,
                          -104.95385497497156, -106.03069451647563, -104.97137742862505, -105.52732839258753, -106.43284370908978, -106.97648277016575, -107.10026993077449, -107.50380055381696, 
                          -108.0872366006321, -108.52118804018241, -109.12049558053083, -109.13943526568177, -109.19021532505474, -109.35368116045458, -108.9564386285079, -108.48942369424529, 
                          -108.1625057801655, -107.58874054478314, -106.93409550080841, -105.90455046987447, -104.77799354205305]
    
    tobt = ThirdOctaveTransform()
    
    # File
    # ref94dB_48000Hz_32bitsPCM
    # speak_32000Hz_16bitsPCM_10s
    # ref38dB_48000Hz_32bitsPCM
    sig, fs = sf.read('./speak_32000Hz_16bitsPCM_10s.raw', channels=1, samplerate=32000,
                  format='RAW', subtype='PCM_16')
    #sig, fs = sf.read('./ref94dB_48000Hz_32bitsPCM.raw', channels=2, samplerate=48000,
    #              format='RAW', subtype='PCM_32')
    #sig, fs = sf.read('./ref38dB_48000Hz_32bitsPCM.raw', channels=2, samplerate=48000,
    #              format='RAW', subtype='PCM_32')
    
    # STEREO SIGNALS ARE SUMMED NOT AVERAGED
    #sig = np.mean(sig, 1)*2
    if fs != 32000:
        sig = lr.resample(sig, fs, 32000)
    
    tob = tobt.wave_to_third_octave(sig)
    tob1 = 10*np.log10((10**(tob/10)).mean(1))
    print('Level: {}'.format(10*np.log10((10**(tob/10)).sum(0))))
    print('Expected Leq: {}'.format([-26.21, -27.94, -29.12, -28.92, -40.4, -24.93, -31.55, -29.04, -31.08, -30.65]))
    
    print(tob1-expected_leqs_speech)
    #print(tob1-expected_leqs_94dB)
    #print(tob1-expected_leqs_38dB)
    
    plt.semilogx(f, tob1)
    
    plt.semilogx(f, nicof_speech)
    plt.semilogx(f, expected_leqs_speech)
    
    #plt.semilogx(f, nicof_94dB)
    #plt.semilogx(f, expected_leqs_94dB)
    
    #plt.semilogx(f, nicof_38dB)
    #plt.semilogx(f, expected_leqs_38dB)
    
    plt.legend(['FG', 'NF', 'Expected'])
    
    plt.grid()
    plt.show()
    
    
    

if __name__=='__main__':
    test()

